#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üöÄ Actualizando versi√≥n del proyecto...\n');

// Funci√≥n para obtener la versi√≥n actual
function getCurrentVersion() {
  try {
    const packagePath = path.join(process.cwd(), 'package.json');
    const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageContent.version;
  } catch (error) {
    console.error('‚ùå Error leyendo package.json:', error.message);
    return null;
  }
}

// Funci√≥n para incrementar la versi√≥n
function incrementVersion(version, type = 'patch') {
  const parts = version.split('.').map(Number);
  
  switch (type) {
    case 'major':
      parts[0]++;
      parts[1] = 0;
      parts[2] = 0;
      break;
    case 'minor':
      parts[1]++;
      parts[2] = 0;
      break;
    case 'patch':
    default:
      parts[2]++;
      break;
  }
  
  return parts.join('.');
}

// Funci√≥n para actualizar package.json
function updatePackageJson(newVersion) {
  const packagePath = path.join(process.cwd(), 'package.json');
  const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  packageContent.version = newVersion;
  fs.writeFileSync(packagePath, JSON.stringify(packageContent, null, 2) + '\n');
  console.log(`‚úÖ package.json actualizado a versi√≥n ${newVersion}`);
}

// Funci√≥n para actualizar VERSION.md
function updateVersionFile(newVersion) {
  const versionPath = path.join(process.cwd(), 'VERSION.md');
  let content = fs.readFileSync(versionPath, 'utf8');
  
  const now = new Date();
  const dateString = now.toISOString().split('T')[0];
  const timeString = now.toTimeString().split(' ')[0];
  
  // Agregar nueva entrada al inicio del archivo
  const newEntry = `## üöÄ Versi√≥n ${newVersion} - [${dateString} ${timeString}]

### ‚úÖ **Cambios Realizados:**
- **Actualizaci√≥n autom√°tica**: Versi√≥n sincronizada autom√°ticamente
- **Mejoras en el sistema de versionado**: Sincronizaci√≥n autom√°tica entre archivos

### üîß **Archivos Modificados:**
- \`package.json\` (VERSI√ìN ACTUALIZADA)
- \`src/pages/Home.tsx\` (VERSI√ìN SINCRONIZADA)
- \`VERSION.md\` (HISTORIAL ACTUALIZADO)

### üì¶ **Dependencias:**
- **Sin cambios**: Solo actualizaci√≥n de versi√≥n

---

`;
  
  // Insertar la nueva entrada despu√©s del t√≠tulo
  content = content.replace(/(# üìã Historial de Versiones - Control de Reuni√≥n\s*\n)/, `$1${newEntry}`);
  
  fs.writeFileSync(versionPath, content, 'utf8');
  console.log(`‚úÖ VERSION.md actualizado con nueva entrada para versi√≥n ${newVersion}`);
}

// Funci√≥n principal
function updateVersion(type = 'patch') {
  const currentVersion = getCurrentVersion();
  
  if (!currentVersion) {
    console.error('‚ùå No se pudo obtener la versi√≥n actual');
    return;
  }
  
  const newVersion = incrementVersion(currentVersion, type);
  
  console.log(`üì¶ Versi√≥n actual: ${currentVersion}`);
  console.log(`üÜï Nueva versi√≥n: ${newVersion} (${type})`);
  
  // Actualizar archivos
  updatePackageJson(newVersion);
  updateVersionFile(newVersion);
  
  // Ejecutar sincronizaci√≥n
  console.log('\nüîÑ Ejecutando sincronizaci√≥n...');
  try {
    execSync('npm run sync-version', { stdio: 'inherit' });
    console.log('\nüéâ ¬°Actualizaci√≥n de versi√≥n completada exitosamente!');
    console.log(`‚úÖ Proyecto actualizado a versi√≥n ${newVersion}`);
    console.log(`‚è∞ Fecha: ${new Date().toLocaleString('es-ES')}`);
  } catch (error) {
    console.error('‚ùå Error durante la sincronizaci√≥n:', error.message);
  }
}

// Obtener tipo de actualizaci√≥n desde argumentos
const type = process.argv[2] || 'patch';

if (!['major', 'minor', 'patch'].includes(type)) {
  console.error('‚ùå Tipo de actualizaci√≥n inv√°lido. Use: major, minor, o patch');
  process.exit(1);
}

// Ejecutar actualizaci√≥n
try {
  updateVersion(type);
} catch (error) {
  console.error('‚ùå Error durante la actualizaci√≥n:', error.message);
  process.exit(1);
}
