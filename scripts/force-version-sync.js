#!/usr/bin/env node

/**
 * Script robusto para forzar sincronizaci√≥n de versiones al 100%
 * Garantiza que package.json, Directorio.tsx y VERSION.md est√©n sincronizados
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

console.log('üöÄ Iniciando sincronizaci√≥n forzada de versiones...\n');

// Funci√≥n para leer archivo JSON
function readJsonFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå Error leyendo ${filePath}:`, error.message);
    return null;
  }
}

// Funci√≥n para escribir archivo JSON
function writeJsonFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2) + '\n');
    return true;
  } catch (error) {
    console.error(`‚ùå Error escribiendo ${filePath}:`, error.message);
    return false;
  }
}

// Funci√≥n para actualizar versi√≥n en Directorio.tsx
function updateDirectorioVersion(version) {
  const directorioPath = path.join(projectRoot, 'src', 'pages', 'Directorio.tsx');
  
  try {
    let content = fs.readFileSync(directorioPath, 'utf8');
    
    // Buscar y reemplazar la versi√≥n en el badge
    const versionRegex = /v\d+\.\d+\.\d+/g;
    content = content.replace(versionRegex, `v${version}`);
    
    fs.writeFileSync(directorioPath, content);
    console.log(`‚úÖ Directorio.tsx actualizado a v${version}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error actualizando Directorio.tsx:`, error.message);
    return false;
  }
}

// Funci√≥n para actualizar VERSION.md
function updateVersionMd(version) {
  const versionMdPath = path.join(projectRoot, 'VERSION.md');
  
  try {
    let content = fs.readFileSync(versionMdPath, 'utf8');
    
    // Buscar la primera l√≠nea que contiene la versi√≥n m√°s reciente
    const lines = content.split('\n');
    const now = new Date();
    const timestamp = now.toISOString().replace('T', ' ').substring(0, 19);
    
    // Crear nueva entrada de versi√≥n
    const newVersionEntry = `## v${version} - ${timestamp}\n- Sincronizaci√≥n forzada de versiones\n- Garant√≠a 100% de sincronizaci√≥n entre archivos\n\n`;
    
    // Insertar al principio del archivo
    content = newVersionEntry + content;
    
    fs.writeFileSync(versionMdPath, content);
    console.log(`‚úÖ VERSION.md actualizado a v${version}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error actualizando VERSION.md:`, error.message);
    return false;
  }
}

// Funci√≥n principal
function forceVersionSync() {
  console.log('üì¶ Leyendo package.json...');
  const packageJson = readJsonFile(path.join(projectRoot, 'package.json'));
  
  if (!packageJson) {
    console.error('‚ùå No se pudo leer package.json');
    process.exit(1);
  }
  
  const currentVersion = packageJson.version;
  console.log(`üìã Versi√≥n actual en package.json: ${currentVersion}`);
  
  // Incrementar versi√≥n patch
  const versionParts = currentVersion.split('.');
  const major = parseInt(versionParts[0]);
  const minor = parseInt(versionParts[1]);
  const patch = parseInt(versionParts[2]) + 1;
  const newVersion = `${major}.${minor}.${patch}`;
  
  console.log(`üîÑ Incrementando versi√≥n a: ${newVersion}\n`);
  
  // Actualizar package.json
  packageJson.version = newVersion;
  if (!writeJsonFile(path.join(projectRoot, 'package.json'), packageJson)) {
    console.error('‚ùå Error actualizando package.json');
    process.exit(1);
  }
  console.log(`‚úÖ package.json actualizado a v${newVersion}`);
  
  // Actualizar Directorio.tsx
  if (!updateDirectorioVersion(newVersion)) {
    console.error('‚ùå Error actualizando Directorio.tsx');
    process.exit(1);
  }
  
  // Actualizar VERSION.md
  if (!updateVersionMd(newVersion)) {
    console.error('‚ùå Error actualizando VERSION.md');
    process.exit(1);
  }
  
  console.log('\nüéâ ¬°Sincronizaci√≥n forzada completada exitosamente!');
  console.log(`‚úÖ Todas las versiones sincronizadas a: v${newVersion}`);
  console.log('üìÅ Archivos actualizados:');
  console.log('   - package.json');
  console.log('   - src/pages/Directorio.tsx');
  console.log('   - VERSION.md');
  console.log('\nüöÄ Listo para commit y push');
}

// Ejecutar script
forceVersionSync();
