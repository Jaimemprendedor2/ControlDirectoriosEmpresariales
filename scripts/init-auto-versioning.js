#!/usr/bin/env node

/**
 * Script de inicializaci√≥n para sistema de versionado autom√°tico
 * Configura Git hooks y actualiza la versi√≥n inicial
 */

import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

console.log('üöÄ Inicializando sistema de versionado autom√°tico...\n');

// Funci√≥n para verificar requisitos
function checkRequirements() {
  console.log('üîç Verificando requisitos...');
  
  try {
    // Verificar Git
    execSync('git --version', { stdio: 'pipe' });
    console.log('‚úÖ Git disponible');
    
    // Verificar Node.js
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ Node.js disponible: ${nodeVersion}`);
    
    // Verificar que estamos en un repositorio Git
    execSync('git rev-parse --git-dir', { cwd: projectRoot, stdio: 'pipe' });
    console.log('‚úÖ Repositorio Git detectado');
    
    return true;
  } catch (error) {
    console.error('‚ùå Requisitos no cumplidos:', error.message);
    return false;
  }
}

// Funci√≥n para configurar Git hooks
function setupGitHooks() {
  console.log('\nüîß Configurando Git hooks...');
  
  try {
    execSync('node scripts/setup-git-hooks.js', { 
      cwd: projectRoot, 
      stdio: 'inherit' 
    });
    console.log('‚úÖ Git hooks configurados');
    return true;
  } catch (error) {
    console.error('‚ùå Error configurando Git hooks:', error.message);
    return false;
  }
}

// Funci√≥n para actualizar versi√≥n inicial
function updateInitialVersion() {
  console.log('\nüì¶ Actualizando versi√≥n inicial...');
  
  try {
    execSync('node scripts/auto-update-version.js', { 
      cwd: projectRoot, 
      stdio: 'inherit' 
    });
    console.log('‚úÖ Versi√≥n inicial actualizada');
    return true;
  } catch (error) {
    console.error('‚ùå Error actualizando versi√≥n:', error.message);
    return false;
  }
}

// Funci√≥n para crear archivo de documentaci√≥n
function createDocumentation() {
  console.log('\nüìö Creando documentaci√≥n...');
  
  const docContent = `# Sistema de Versionado Autom√°tico

## Descripci√≥n
Este proyecto incluye un sistema autom√°tico de versionado que actualiza la versi√≥n en cada commit de Git.

## Archivos Actualizados Autom√°ticamente
- \`package.json\` - Versi√≥n principal
- \`VERSION.md\` - Historial de versiones
- \`VERSION.txt\` - Informaci√≥n de versi√≥n simple
- \`build-info.json\` - Informaci√≥n de build
- Archivos de interfaz (Directorio.tsx, MainMenu.tsx, MeetingView.tsx)

## Scripts Disponibles
- \`npm run auto-update-version\` - Actualizar versi√≥n manualmente
- \`npm run setup-git-hooks\` - Configurar Git hooks
- \`npm run commit-with-version\` - Commit con actualizaci√≥n de versi√≥n

## Git Hooks Configurados
- **pre-commit**: Actualiza autom√°ticamente la versi√≥n antes de cada commit

## Funcionamiento
1. Cada vez que haces un commit, el hook pre-commit se ejecuta autom√°ticamente
2. Se incrementa la versi√≥n patch (x.x.X)
3. Se actualiza la fecha de compilaci√≥n
4. Se actualizan todos los archivos de versi√≥n
5. Los archivos se agregan autom√°ticamente al commit

## Configuraci√≥n
El sistema se configura autom√°ticamente al ejecutar:
\`\`\`bash
node scripts/init-auto-versioning.js
\`\`\`

## Verificaci√≥n
Para verificar que todo funciona:
\`\`\`bash
npm run verify-sync
\`\`\`

---
*Generado autom√°ticamente el ${new Date().toLocaleString('es-ES')}*
`;

  const docPath = path.join(projectRoot, 'AUTO_VERSIONING.md');
  fs.writeFileSync(docPath, docContent);
  console.log('‚úÖ Documentaci√≥n creada: AUTO_VERSIONING.md');
}

// Funci√≥n para mostrar resumen
function showSummary() {
  console.log('\nüéâ ¬°Sistema de versionado autom√°tico configurado exitosamente!');
  console.log('\nüìã Resumen de la configuraci√≥n:');
  console.log('   ‚úÖ Git hooks configurados');
  console.log('   ‚úÖ Versi√≥n inicial actualizada');
  console.log('   ‚úÖ Scripts de versionado disponibles');
  console.log('   ‚úÖ Documentaci√≥n creada');
  
  console.log('\nüöÄ Pr√≥ximos pasos:');
  console.log('   1. Hacer un commit para probar la actualizaci√≥n autom√°tica:');
  console.log('      git add .');
  console.log('      git commit -m "Configuraci√≥n de versionado autom√°tico"');
  console.log('   2. Verificar que la versi√≥n se actualiza autom√°ticamente');
  console.log('   3. Los archivos de versi√≥n se incluir√°n autom√°ticamente en cada commit');
  
  console.log('\nüìö Comandos √∫tiles:');
  console.log('   - npm run auto-update-version  # Actualizar versi√≥n manualmente');
  console.log('   - npm run verify-sync          # Verificar sincronizaci√≥n');
  console.log('   - npm run setup-git-hooks      # Reconfigurar hooks');
  
  console.log('\nüìñ Documentaci√≥n: AUTO_VERSIONING.md');
}

// Funci√≥n principal
function main() {
  console.log('üîß Inicializando sistema de versionado autom√°tico...\n');
  
  // Verificar requisitos
  if (!checkRequirements()) {
    console.log('\n‚ùå No se pueden cumplir los requisitos. Abortando...');
    process.exit(1);
  }
  
  // Configurar Git hooks
  if (!setupGitHooks()) {
    console.log('\n‚ùå Error configurando Git hooks. Abortando...');
    process.exit(1);
  }
  
  // Actualizar versi√≥n inicial
  if (!updateInitialVersion()) {
    console.log('\n‚ùå Error actualizando versi√≥n inicial. Abortando...');
    process.exit(1);
  }
  
  // Crear documentaci√≥n
  createDocumentation();
  
  // Mostrar resumen
  showSummary();
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  try {
    main();
  } catch (error) {
    console.error('‚ùå Error durante la inicializaci√≥n:', error);
    process.exit(1);
  }
}

export { main as initAutoVersioning };
