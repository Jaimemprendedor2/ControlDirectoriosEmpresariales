export class NotificationPlugin {
  private permission: NotificationPermission = 'default';
  private isEnabled: boolean = true;

  constructor() {
    this.checkPermission();
  }

  private async checkPermission() {
    if ('Notification' in window) {
      this.permission = Notification.permission;
    }
  }

  async requestPermission(): Promise<boolean> {
    if ('Notification' in window) {
      this.permission = await Notification.requestPermission();
      console.log('üîî Permiso de notificaci√≥n:', this.permission);
      return this.permission === 'granted';
    }
    return false;
  }

  setEnabled(enabled: boolean) {
    this.isEnabled = enabled;
  }

  isNotificationEnabled(): boolean {
    return this.isEnabled && this.permission === 'granted';
  }

  showNotification(title: string, body: string, icon?: string, tag?: string) {
    if (!this.isNotificationEnabled()) {
      console.log('üîî Notificaciones deshabilitadas o sin permiso');
      return;
    }

    try {
      const notification = new Notification(title, {
        body,
        icon: icon || '/favicon.ico',
        badge: '/favicon.ico',
        tag: tag || 'timer-notification',
        requireInteraction: false,
        silent: false
      });

      // Auto-cerrar despu√©s de 5 segundos
      setTimeout(() => {
        notification.close();
      }, 5000);

      console.log('üîî Notificaci√≥n enviada:', title);
    } catch (error) {
      console.error('‚ùå Error mostrando notificaci√≥n:', error);
    }
  }

  showStageCompleteNotification(stageName: string) {
    this.showNotification(
      '‚è∞ Etapa Completada',
      `La etapa "${stageName}" ha terminado`,
      '/timer-icon.png',
      'stage-complete'
    );
  }

  showTimerStartNotification() {
    this.showNotification(
      '‚ñ∂Ô∏è Cron√≥metro Iniciado',
      'El cron√≥metro ha comenzado a funcionar',
      '/timer-icon.png',
      'timer-start'
    );
  }

  showTimerPauseNotification() {
    this.showNotification(
      '‚è∏Ô∏è Cron√≥metro Pausado',
      'El cron√≥metro ha sido pausado',
      '/timer-icon.png',
      'timer-pause'
    );
  }

  showTimerStopNotification() {
    this.showNotification(
      '‚èπÔ∏è Cron√≥metro Detenido',
      'El cron√≥metro ha sido detenido',
      '/timer-icon.png',
      'timer-stop'
    );
  }

  showBackgroundModeNotification() {
    this.showNotification(
      'üîí Modo Segundo Plano',
      'El cron√≥metro sigue funcionando en segundo plano',
      '/timer-icon.png',
      'background-mode'
    );
  }

  showWarningNotification(message: string) {
    this.showNotification(
      '‚ö†Ô∏è Advertencia',
      message,
      '/timer-icon.png',
      'warning'
    );
  }

  showErrorNotification(message: string) {
    this.showNotification(
      '‚ùå Error',
      message,
      '/timer-icon.png',
      'error'
    );
  }

  // Limpiar todas las notificaciones
  clearAllNotifications() {
    if ('Notification' in window && Notification.permission === 'granted') {
      // Las notificaciones se cierran autom√°ticamente, pero podemos forzar el cierre
      console.log('üßπ Limpiando notificaciones');
    }
  }
}
